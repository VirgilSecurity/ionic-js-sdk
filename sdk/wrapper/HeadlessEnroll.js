import { enrollUser } from './Profile';
import { getIonicAssertion } from './IonicAssertion';
import { createDevice } from './CreateDevice';

export { enrollUserWithSamlAssertion };

/**
 * {@link https://dev.ionic.com/registration.html|Enrolls} user (device) in "headless" mode.
 * Converts the given SAML Assertion to Ionic Assertion and creates a new Ionic device profile 
 * for the user.
 *
 * NOTE: Unlike the `enrollUser` method, this method completes the enrollment process 
 * automatically. The only requirement from the Enrollment Server is that it allows 
 * cross-origin requests from the application origin (i.e. specifies `Access-Control-Allow-Origin` 
 * header that matches the origin of your app, like `https://myapp.example.com`).
 * 
 * @param {ProfileInfoWithSamlAssertion} argObj
 * @returns {Promise<object>} - Resolves with a result of `createDevice` call.
 *
 * @example
 * var promise = sdk.enrollUserWithSamlAssertion({
  *      appId: 'helloworld',
  *      userId: 'myuser',
  *      userAuth: 'password123',
  *      enrollmentUrl: 'https://someurl.ionic.com/keyspace/headless',
  *      samlAssertionXml: '<?xml version="1.0"?><samlp:Response>...</samlp:Response>'
  * });
  * @memberof ISAgent
  * @instance
  */
function enrollUserWithSamlAssertion(argObj) {
  return enrollUser(argObj)
      .then(enrollResponse => {
          if (enrollResponse.sdkResponseCode !== 0) return enrollResponse;
          return getIonicAssertion(argObj);
      })
      .then(assertionResponse => {
          if (assertionResponse.sdkResponseCode !== 0) return assertionResponse;
          return createDevice(assertionResponse.ionicAssertion);
    });
}

////////////////////////////////////////////
// JSDoc custom types
// see http://usejsdoc.org/tags-typedef.html
//
// Defines objects that are passed into or
// returned by multiple functions
////////////////////////////////////////////
/**
 * Device (user) enrollment profile. 
 * Contains identifying information for the specific client application and user/device.  
 * @typedef {Object.<string, string>} ProfileInfoWithSamlAssertion
 * @property {String} appId Unique application identifier used for device profile lookup.
 * @property {String} userId Identifier for the enrolling user/device.
 * @property {String} userAuth Password/pin/key for the enrolling user/device.
 * @property {String} enrollmentUrl Application's Enrollment Server URL.
 * @property {String} samlAssertionXml SAML Assertion generated by the Application's Identity
 *                                     Provider. Proves that the specified user/device was 
 *                                     authenticated.
 * @property {String} [deviceId] Unique device identifier - each successful 
 * enrollment generates a new (and guaranteed unique for that keyspace) deviceId.
 * A UUID for the device, constructed of the four-character keyspace followed by 
 * a Base64-encoded random number.
 */